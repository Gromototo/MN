

void afficher_graphe_profondeur (pgraphe_t g, int r) ;

void afficher_graphe_largeur (pgraphe_t g, int r) ;

void algo_dijkstra (pgraphe_t g, int r) ;


int degre_sortant_sommet (pgraphe_t g, psommet_t s);
int degre_entrant_sommet (pgraphe_t g, psommet_t s);
int degre_maximal_graphe (pgraphe_t g);
int degre_minimal_graphe (pgraphe_t g);
int independant (pgraphe_t g);
int complet (pgraphe_t g);
int regulier (pgraphe_t g);

int elementaire ( pgraphe_t g , chemin_t c ); POSITIVE NEGATIVE
int simple ( pgraphe_t g , chemin_t c );  POSITIVE NEGATIVE
int eulerien ( pgraphe_t g , chemin_t c ); POSITIVE NEGATIVE
int hamiltonien ( pgraphe_t g , chemin_t c ); POSITIVE  NEGATIVE
int graphe_eulerien ( pgraphe_t g); POSITIVE NEGATIVE
int graphe_hamiltonien( pgraphe_t g); POSITIVE NEGATIVE
int distance (pgraphe_t g, int x, int y); DONE
int excentricite (pgraphe_t g, int n); DONE
int diametre( pgraphe_t g); DONE
int longueur(pgraphe_t g, chemin_t c); DONE